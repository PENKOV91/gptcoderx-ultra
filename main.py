import os
import logging
from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import FileResponse, JSONResponse
from fastapi.requests import Request
from fastapi.exceptions import RequestValidationError

# –ò–º–ø–æ—Ä—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≤—Å–∏—á–∫–∏ —Ä—É—Ç–µ—Ä–∏
from deepseek_api import router as deepseek_router
from github_search import router as github_router
from webpilot_search import router as webpilot_router
from merge import router as merge_router

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ –ª–æ–≥–∏—Ä–∞–Ω–µ—Ç–æ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="GPT-CODER X ULTRA",
    description="–ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–∞–Ω GPT –∞–≥–µ–Ω—Ç –∑–∞ —Å—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ MQL4/MQL5/Python –∫–æ–¥",
    version="1.0.0",
    docs_url=None,
    redoc_url=None,
    openapi_url=None,
    on_startup=[lambda: logger.info("üöÄ –°–µ—Ä–≤–∏—Ä—ä—Ç —Å—Ç–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ!")],
    on_shutdown=[lambda: logger.info("üõë –°–µ—Ä–≤–∏—Ä—ä—Ç —Å–ø–∏—Ä–∞...")]
)

# ==============================================
# –ú–∏–¥—ä–ª—É–µ—Ä–∏ –∏ —Å–∏–≥—É—Ä–Ω–æ—Å—Ç
# ==============================================
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # –ó–∞ production –ø—Ä–æ–º–µ–Ω–µ—Ç–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏ –¥–æ–º–µ–π–Ω–∏
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
    expose_headers=["X-API-Version"]
)

# –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ security headers
@app.middleware("http")
async def add_security_headers(request: Request, call_next):
    response = await call_next(request)
    response.headers.update({
        "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
        "X-Content-Type-Options": "nosniff",
        "X-Frame-Options": "DENY",
        "X-XSS-Protection": "1; mode=block",
        "Content-Security-Policy": "default-src 'self'"
    })
    return response

# ==============================================
# –ì–ª–æ–±–∞–ª–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞ –≥—Ä–µ—à–∫–∏
# ==============================================
@app.exception_handler(RequestValidationError)
async def validation_exception_handler(request: Request, exc: RequestValidationError):
    logger.error(f"Validation error: {exc.errors()}")
    return JSONResponse(
        status_code=422,
        content={"detail": "–ù–µ–≤–∞–ª–∏–¥–Ω–∏ –≤—Ö–æ–¥–Ω–∏ –¥–∞–Ω–Ω–∏"}
    )

@app.exception_handler(Exception)
async def global_exception_handler(request: Request, exc: Exception):
    logger.error(f"Global error: {str(exc)}", exc_info=True)
    return JSONResponse(
        status_code=500,
        content={"detail": "–í—ä—Ç—Ä–µ—à–Ω–∞ –≥—Ä–µ—à–∫–∞ –≤ —Å—ä—Ä–≤—ä—Ä–∞"}
    )

# ==============================================
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Ä—É—Ç–µ—Ä–∏
# ==============================================
app.include_router(
    deepseek_router,
    prefix="/code",
    tags=["Code Generation"]
)

app.include_router(
    github_router,
    prefix="/search",
    tags=["GitHub Search"]
)

app.include_router(
    webpilot_router,
    prefix="/search",
    tags=["Web Search"]
)

app.include_router(
    merge_router,
    prefix="/merge",
    tags=["Data Merging"]
)

# ==============================================
# –°—Ç–∞—Ç–∏—á–Ω–∏ —Ñ–∞–π–ª–æ–≤–µ –∏ –±–∞–∑–æ–≤–∏ –µ–Ω–¥–ø–æ–π–Ω—Ç–∏
# ==============================================
WELL_KNOWN_DIR = ".well-known"

@app.on_event("startup")
async def startup_event():
    # –°—ä–∑–¥–∞–≤–∞–Ω–µ –Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∞–∫–æ –Ω–µ —Å—ä—â–µ—Å—Ç–≤—É–≤–∞
    os.makedirs(WELL_KNOWN_DIR, exist_ok=True)
    logger.info(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {WELL_KNOWN_DIR} –µ –ø–æ–¥–≥–æ—Ç–≤–µ–Ω–∞")

@app.get("/", include_in_schema=False)
async def root():
    return {
        "status": "active",
        "version": app.version,
        "services": ["DeepSeek", "GitHub", "WebPilot", "MQL5"]
    }

@app.get("/health", include_in_schema=False)
async def health_check():
    return JSONResponse(content={"status": "OK", "timestamp": datetime.utcnow().isoformat()})

app.mount(
    "/.well-known",
    StaticFiles(directory=WELL_KNOWN_DIR),
    name="wellknown"
)

@app.get("/openapi.json", include_in_schema=False)
async def custom_openapi():
    return FileResponse(
        f"{WELL_KNOWN_DIR}/openapi.json",
        media_type="application/json",
        headers={"X-API-Version": app.version}
    )

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(
        app,
        host="0.0.0.0",
        port=8000,
        log_config=None,
        timeout_keep_alive=300
    )
